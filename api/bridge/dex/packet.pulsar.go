// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dex

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_DexPacketData                  protoreflect.MessageDescriptor
	fd_DexPacketData_noData           protoreflect.FieldDescriptor
	fd_DexPacketData_createPairPacket protoreflect.FieldDescriptor
	fd_DexPacketData_sellPacket       protoreflect.FieldDescriptor
	fd_DexPacketData_buyPacket        protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_DexPacketData = File_bridge_dex_packet_proto.Messages().ByName("DexPacketData")
	fd_DexPacketData_noData = md_DexPacketData.Fields().ByName("noData")
	fd_DexPacketData_createPairPacket = md_DexPacketData.Fields().ByName("createPairPacket")
	fd_DexPacketData_sellPacket = md_DexPacketData.Fields().ByName("sellPacket")
	fd_DexPacketData_buyPacket = md_DexPacketData.Fields().ByName("buyPacket")
}

var _ protoreflect.Message = (*fastReflection_DexPacketData)(nil)

type fastReflection_DexPacketData DexPacketData

func (x *DexPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DexPacketData)(x)
}

func (x *DexPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DexPacketData_messageType fastReflection_DexPacketData_messageType
var _ protoreflect.MessageType = fastReflection_DexPacketData_messageType{}

type fastReflection_DexPacketData_messageType struct{}

func (x fastReflection_DexPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DexPacketData)(nil)
}
func (x fastReflection_DexPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_DexPacketData)
}
func (x fastReflection_DexPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DexPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DexPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_DexPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DexPacketData) Type() protoreflect.MessageType {
	return _fastReflection_DexPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DexPacketData) New() protoreflect.Message {
	return new(fastReflection_DexPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DexPacketData) Interface() protoreflect.ProtoMessage {
	return (*DexPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DexPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Packet != nil {
		switch o := x.Packet.(type) {
		case *DexPacketData_NoData:
			v := o.NoData
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_DexPacketData_noData, value) {
				return
			}
		case *DexPacketData_CreatePairPacket:
			v := o.CreatePairPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_DexPacketData_createPairPacket, value) {
				return
			}
		case *DexPacketData_SellPacket:
			v := o.SellPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_DexPacketData_sellPacket, value) {
				return
			}
		case *DexPacketData_BuyPacket:
			v := o.BuyPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_DexPacketData_buyPacket, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DexPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.DexPacketData.noData":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*DexPacketData_NoData); ok {
			return true
		} else {
			return false
		}
	case "bridge.dex.DexPacketData.createPairPacket":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*DexPacketData_CreatePairPacket); ok {
			return true
		} else {
			return false
		}
	case "bridge.dex.DexPacketData.sellPacket":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*DexPacketData_SellPacket); ok {
			return true
		} else {
			return false
		}
	case "bridge.dex.DexPacketData.buyPacket":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*DexPacketData_BuyPacket); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DexPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.DexPacketData.noData":
		x.Packet = nil
	case "bridge.dex.DexPacketData.createPairPacket":
		x.Packet = nil
	case "bridge.dex.DexPacketData.sellPacket":
		x.Packet = nil
	case "bridge.dex.DexPacketData.buyPacket":
		x.Packet = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DexPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.DexPacketData.noData":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*NoData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*DexPacketData_NoData); ok {
			return protoreflect.ValueOfMessage(v.NoData.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*NoData)(nil).ProtoReflect())
		}
	case "bridge.dex.DexPacketData.createPairPacket":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*CreatePairPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*DexPacketData_CreatePairPacket); ok {
			return protoreflect.ValueOfMessage(v.CreatePairPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*CreatePairPacketData)(nil).ProtoReflect())
		}
	case "bridge.dex.DexPacketData.sellPacket":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*SellPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*DexPacketData_SellPacket); ok {
			return protoreflect.ValueOfMessage(v.SellPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*SellPacketData)(nil).ProtoReflect())
		}
	case "bridge.dex.DexPacketData.buyPacket":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*BuyPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*DexPacketData_BuyPacket); ok {
			return protoreflect.ValueOfMessage(v.BuyPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*BuyPacketData)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DexPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.DexPacketData.noData":
		cv := value.Message().Interface().(*NoData)
		x.Packet = &DexPacketData_NoData{NoData: cv}
	case "bridge.dex.DexPacketData.createPairPacket":
		cv := value.Message().Interface().(*CreatePairPacketData)
		x.Packet = &DexPacketData_CreatePairPacket{CreatePairPacket: cv}
	case "bridge.dex.DexPacketData.sellPacket":
		cv := value.Message().Interface().(*SellPacketData)
		x.Packet = &DexPacketData_SellPacket{SellPacket: cv}
	case "bridge.dex.DexPacketData.buyPacket":
		cv := value.Message().Interface().(*BuyPacketData)
		x.Packet = &DexPacketData_BuyPacket{BuyPacket: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DexPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.DexPacketData.noData":
		if x.Packet == nil {
			value := &NoData{}
			oneofValue := &DexPacketData_NoData{NoData: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *DexPacketData_NoData:
			return protoreflect.ValueOfMessage(m.NoData.ProtoReflect())
		default:
			value := &NoData{}
			oneofValue := &DexPacketData_NoData{NoData: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "bridge.dex.DexPacketData.createPairPacket":
		if x.Packet == nil {
			value := &CreatePairPacketData{}
			oneofValue := &DexPacketData_CreatePairPacket{CreatePairPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *DexPacketData_CreatePairPacket:
			return protoreflect.ValueOfMessage(m.CreatePairPacket.ProtoReflect())
		default:
			value := &CreatePairPacketData{}
			oneofValue := &DexPacketData_CreatePairPacket{CreatePairPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "bridge.dex.DexPacketData.sellPacket":
		if x.Packet == nil {
			value := &SellPacketData{}
			oneofValue := &DexPacketData_SellPacket{SellPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *DexPacketData_SellPacket:
			return protoreflect.ValueOfMessage(m.SellPacket.ProtoReflect())
		default:
			value := &SellPacketData{}
			oneofValue := &DexPacketData_SellPacket{SellPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "bridge.dex.DexPacketData.buyPacket":
		if x.Packet == nil {
			value := &BuyPacketData{}
			oneofValue := &DexPacketData_BuyPacket{BuyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *DexPacketData_BuyPacket:
			return protoreflect.ValueOfMessage(m.BuyPacket.ProtoReflect())
		default:
			value := &BuyPacketData{}
			oneofValue := &DexPacketData_BuyPacket{BuyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DexPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.DexPacketData.noData":
		value := &NoData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bridge.dex.DexPacketData.createPairPacket":
		value := &CreatePairPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bridge.dex.DexPacketData.sellPacket":
		value := &SellPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bridge.dex.DexPacketData.buyPacket":
		value := &BuyPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.DexPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.DexPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DexPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "bridge.dex.DexPacketData.packet":
		if x.Packet == nil {
			return nil
		}
		switch x.Packet.(type) {
		case *DexPacketData_NoData:
			return x.Descriptor().Fields().ByName("noData")
		case *DexPacketData_CreatePairPacket:
			return x.Descriptor().Fields().ByName("createPairPacket")
		case *DexPacketData_SellPacket:
			return x.Descriptor().Fields().ByName("sellPacket")
		case *DexPacketData_BuyPacket:
			return x.Descriptor().Fields().ByName("buyPacket")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.DexPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DexPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DexPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DexPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DexPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DexPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Packet.(type) {
		case *DexPacketData_NoData:
			if x == nil {
				break
			}
			l = options.Size(x.NoData)
			n += 1 + l + runtime.Sov(uint64(l))
		case *DexPacketData_CreatePairPacket:
			if x == nil {
				break
			}
			l = options.Size(x.CreatePairPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *DexPacketData_SellPacket:
			if x == nil {
				break
			}
			l = options.Size(x.SellPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *DexPacketData_BuyPacket:
			if x == nil {
				break
			}
			l = options.Size(x.BuyPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DexPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Packet.(type) {
		case *DexPacketData_NoData:
			encoded, err := options.Marshal(x.NoData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *DexPacketData_CreatePairPacket:
			encoded, err := options.Marshal(x.CreatePairPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *DexPacketData_SellPacket:
			encoded, err := options.Marshal(x.SellPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *DexPacketData_BuyPacket:
			encoded, err := options.Marshal(x.BuyPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DexPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DexPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DexPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &NoData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &DexPacketData_NoData{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatePairPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &CreatePairPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &DexPacketData_CreatePairPacket{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SellPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &SellPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &DexPacketData_SellPacket{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BuyPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &BuyPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &DexPacketData_BuyPacket{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NoData protoreflect.MessageDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_NoData = File_bridge_dex_packet_proto.Messages().ByName("NoData")
}

var _ protoreflect.Message = (*fastReflection_NoData)(nil)

type fastReflection_NoData NoData

func (x *NoData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NoData)(x)
}

func (x *NoData) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NoData_messageType fastReflection_NoData_messageType
var _ protoreflect.MessageType = fastReflection_NoData_messageType{}

type fastReflection_NoData_messageType struct{}

func (x fastReflection_NoData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NoData)(nil)
}
func (x fastReflection_NoData_messageType) New() protoreflect.Message {
	return new(fastReflection_NoData)
}
func (x fastReflection_NoData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NoData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NoData) Descriptor() protoreflect.MessageDescriptor {
	return md_NoData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NoData) Type() protoreflect.MessageType {
	return _fastReflection_NoData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NoData) New() protoreflect.Message {
	return new(fastReflection_NoData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NoData) Interface() protoreflect.ProtoMessage {
	return (*NoData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NoData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NoData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NoData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NoData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.NoData"))
		}
		panic(fmt.Errorf("message bridge.dex.NoData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NoData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.NoData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NoData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NoData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NoData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NoData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CreatePairPacketData             protoreflect.MessageDescriptor
	fd_CreatePairPacketData_sourceDenom protoreflect.FieldDescriptor
	fd_CreatePairPacketData_targetDenom protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_CreatePairPacketData = File_bridge_dex_packet_proto.Messages().ByName("CreatePairPacketData")
	fd_CreatePairPacketData_sourceDenom = md_CreatePairPacketData.Fields().ByName("sourceDenom")
	fd_CreatePairPacketData_targetDenom = md_CreatePairPacketData.Fields().ByName("targetDenom")
}

var _ protoreflect.Message = (*fastReflection_CreatePairPacketData)(nil)

type fastReflection_CreatePairPacketData CreatePairPacketData

func (x *CreatePairPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CreatePairPacketData)(x)
}

func (x *CreatePairPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CreatePairPacketData_messageType fastReflection_CreatePairPacketData_messageType
var _ protoreflect.MessageType = fastReflection_CreatePairPacketData_messageType{}

type fastReflection_CreatePairPacketData_messageType struct{}

func (x fastReflection_CreatePairPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CreatePairPacketData)(nil)
}
func (x fastReflection_CreatePairPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_CreatePairPacketData)
}
func (x fastReflection_CreatePairPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePairPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CreatePairPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePairPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CreatePairPacketData) Type() protoreflect.MessageType {
	return _fastReflection_CreatePairPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CreatePairPacketData) New() protoreflect.Message {
	return new(fastReflection_CreatePairPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CreatePairPacketData) Interface() protoreflect.ProtoMessage {
	return (*CreatePairPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CreatePairPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceDenom != "" {
		value := protoreflect.ValueOfString(x.SourceDenom)
		if !f(fd_CreatePairPacketData_sourceDenom, value) {
			return
		}
	}
	if x.TargetDenom != "" {
		value := protoreflect.ValueOfString(x.TargetDenom)
		if !f(fd_CreatePairPacketData_targetDenom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CreatePairPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		return x.SourceDenom != ""
	case "bridge.dex.CreatePairPacketData.targetDenom":
		return x.TargetDenom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		x.SourceDenom = ""
	case "bridge.dex.CreatePairPacketData.targetDenom":
		x.TargetDenom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CreatePairPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		value := x.SourceDenom
		return protoreflect.ValueOfString(value)
	case "bridge.dex.CreatePairPacketData.targetDenom":
		value := x.TargetDenom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		x.SourceDenom = value.Interface().(string)
	case "bridge.dex.CreatePairPacketData.targetDenom":
		x.TargetDenom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		panic(fmt.Errorf("field sourceDenom of message bridge.dex.CreatePairPacketData is not mutable"))
	case "bridge.dex.CreatePairPacketData.targetDenom":
		panic(fmt.Errorf("field targetDenom of message bridge.dex.CreatePairPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CreatePairPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.CreatePairPacketData.sourceDenom":
		return protoreflect.ValueOfString("")
	case "bridge.dex.CreatePairPacketData.targetDenom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CreatePairPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.CreatePairPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CreatePairPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CreatePairPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CreatePairPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CreatePairPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CreatePairPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TargetDenom) > 0 {
			i -= len(x.TargetDenom)
			copy(dAtA[i:], x.TargetDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetDenom)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceDenom) > 0 {
			i -= len(x.SourceDenom)
			copy(dAtA[i:], x.SourceDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CreatePairPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePairPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePairPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CreatePairPacketAck protoreflect.MessageDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_CreatePairPacketAck = File_bridge_dex_packet_proto.Messages().ByName("CreatePairPacketAck")
}

var _ protoreflect.Message = (*fastReflection_CreatePairPacketAck)(nil)

type fastReflection_CreatePairPacketAck CreatePairPacketAck

func (x *CreatePairPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CreatePairPacketAck)(x)
}

func (x *CreatePairPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CreatePairPacketAck_messageType fastReflection_CreatePairPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_CreatePairPacketAck_messageType{}

type fastReflection_CreatePairPacketAck_messageType struct{}

func (x fastReflection_CreatePairPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CreatePairPacketAck)(nil)
}
func (x fastReflection_CreatePairPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_CreatePairPacketAck)
}
func (x fastReflection_CreatePairPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePairPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CreatePairPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePairPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CreatePairPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_CreatePairPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CreatePairPacketAck) New() protoreflect.Message {
	return new(fastReflection_CreatePairPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CreatePairPacketAck) Interface() protoreflect.ProtoMessage {
	return (*CreatePairPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CreatePairPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CreatePairPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CreatePairPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CreatePairPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.CreatePairPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.CreatePairPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CreatePairPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.CreatePairPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CreatePairPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePairPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CreatePairPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CreatePairPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CreatePairPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CreatePairPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CreatePairPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePairPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePairPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SellPacketData             protoreflect.MessageDescriptor
	fd_SellPacketData_amountDenom protoreflect.FieldDescriptor
	fd_SellPacketData_amount      protoreflect.FieldDescriptor
	fd_SellPacketData_priceDenom  protoreflect.FieldDescriptor
	fd_SellPacketData_price       protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_SellPacketData = File_bridge_dex_packet_proto.Messages().ByName("SellPacketData")
	fd_SellPacketData_amountDenom = md_SellPacketData.Fields().ByName("amountDenom")
	fd_SellPacketData_amount = md_SellPacketData.Fields().ByName("amount")
	fd_SellPacketData_priceDenom = md_SellPacketData.Fields().ByName("priceDenom")
	fd_SellPacketData_price = md_SellPacketData.Fields().ByName("price")
}

var _ protoreflect.Message = (*fastReflection_SellPacketData)(nil)

type fastReflection_SellPacketData SellPacketData

func (x *SellPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SellPacketData)(x)
}

func (x *SellPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SellPacketData_messageType fastReflection_SellPacketData_messageType
var _ protoreflect.MessageType = fastReflection_SellPacketData_messageType{}

type fastReflection_SellPacketData_messageType struct{}

func (x fastReflection_SellPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SellPacketData)(nil)
}
func (x fastReflection_SellPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_SellPacketData)
}
func (x fastReflection_SellPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SellPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SellPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_SellPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SellPacketData) Type() protoreflect.MessageType {
	return _fastReflection_SellPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SellPacketData) New() protoreflect.Message {
	return new(fastReflection_SellPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SellPacketData) Interface() protoreflect.ProtoMessage {
	return (*SellPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SellPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AmountDenom != "" {
		value := protoreflect.ValueOfString(x.AmountDenom)
		if !f(fd_SellPacketData_amountDenom, value) {
			return
		}
	}
	if x.Amount != int32(0) {
		value := protoreflect.ValueOfInt32(x.Amount)
		if !f(fd_SellPacketData_amount, value) {
			return
		}
	}
	if x.PriceDenom != "" {
		value := protoreflect.ValueOfString(x.PriceDenom)
		if !f(fd_SellPacketData_priceDenom, value) {
			return
		}
	}
	if x.Price != int32(0) {
		value := protoreflect.ValueOfInt32(x.Price)
		if !f(fd_SellPacketData_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SellPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		return x.AmountDenom != ""
	case "bridge.dex.SellPacketData.amount":
		return x.Amount != int32(0)
	case "bridge.dex.SellPacketData.priceDenom":
		return x.PriceDenom != ""
	case "bridge.dex.SellPacketData.price":
		return x.Price != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		x.AmountDenom = ""
	case "bridge.dex.SellPacketData.amount":
		x.Amount = int32(0)
	case "bridge.dex.SellPacketData.priceDenom":
		x.PriceDenom = ""
	case "bridge.dex.SellPacketData.price":
		x.Price = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SellPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		value := x.AmountDenom
		return protoreflect.ValueOfString(value)
	case "bridge.dex.SellPacketData.amount":
		value := x.Amount
		return protoreflect.ValueOfInt32(value)
	case "bridge.dex.SellPacketData.priceDenom":
		value := x.PriceDenom
		return protoreflect.ValueOfString(value)
	case "bridge.dex.SellPacketData.price":
		value := x.Price
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		x.AmountDenom = value.Interface().(string)
	case "bridge.dex.SellPacketData.amount":
		x.Amount = int32(value.Int())
	case "bridge.dex.SellPacketData.priceDenom":
		x.PriceDenom = value.Interface().(string)
	case "bridge.dex.SellPacketData.price":
		x.Price = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		panic(fmt.Errorf("field amountDenom of message bridge.dex.SellPacketData is not mutable"))
	case "bridge.dex.SellPacketData.amount":
		panic(fmt.Errorf("field amount of message bridge.dex.SellPacketData is not mutable"))
	case "bridge.dex.SellPacketData.priceDenom":
		panic(fmt.Errorf("field priceDenom of message bridge.dex.SellPacketData is not mutable"))
	case "bridge.dex.SellPacketData.price":
		panic(fmt.Errorf("field price of message bridge.dex.SellPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SellPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.SellPacketData.amountDenom":
		return protoreflect.ValueOfString("")
	case "bridge.dex.SellPacketData.amount":
		return protoreflect.ValueOfInt32(int32(0))
	case "bridge.dex.SellPacketData.priceDenom":
		return protoreflect.ValueOfString("")
	case "bridge.dex.SellPacketData.price":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SellPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.SellPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SellPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SellPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SellPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SellPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AmountDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		l = len(x.PriceDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Price != 0 {
			n += 1 + runtime.Sov(uint64(x.Price))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SellPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Price != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Price))
			i--
			dAtA[i] = 0x20
		}
		if len(x.PriceDenom) > 0 {
			i -= len(x.PriceDenom)
			copy(dAtA[i:], x.PriceDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PriceDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AmountDenom) > 0 {
			i -= len(x.AmountDenom)
			copy(dAtA[i:], x.AmountDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SellPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SellPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SellPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PriceDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				x.Price = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Price |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SellPacketAck                 protoreflect.MessageDescriptor
	fd_SellPacketAck_remainingAmount protoreflect.FieldDescriptor
	fd_SellPacketAck_gain            protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_SellPacketAck = File_bridge_dex_packet_proto.Messages().ByName("SellPacketAck")
	fd_SellPacketAck_remainingAmount = md_SellPacketAck.Fields().ByName("remainingAmount")
	fd_SellPacketAck_gain = md_SellPacketAck.Fields().ByName("gain")
}

var _ protoreflect.Message = (*fastReflection_SellPacketAck)(nil)

type fastReflection_SellPacketAck SellPacketAck

func (x *SellPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SellPacketAck)(x)
}

func (x *SellPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SellPacketAck_messageType fastReflection_SellPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_SellPacketAck_messageType{}

type fastReflection_SellPacketAck_messageType struct{}

func (x fastReflection_SellPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SellPacketAck)(nil)
}
func (x fastReflection_SellPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_SellPacketAck)
}
func (x fastReflection_SellPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SellPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SellPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_SellPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SellPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_SellPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SellPacketAck) New() protoreflect.Message {
	return new(fastReflection_SellPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SellPacketAck) Interface() protoreflect.ProtoMessage {
	return (*SellPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SellPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RemainingAmount != int32(0) {
		value := protoreflect.ValueOfInt32(x.RemainingAmount)
		if !f(fd_SellPacketAck_remainingAmount, value) {
			return
		}
	}
	if x.Gain != int32(0) {
		value := protoreflect.ValueOfInt32(x.Gain)
		if !f(fd_SellPacketAck_gain, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SellPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		return x.RemainingAmount != int32(0)
	case "bridge.dex.SellPacketAck.gain":
		return x.Gain != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		x.RemainingAmount = int32(0)
	case "bridge.dex.SellPacketAck.gain":
		x.Gain = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SellPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		value := x.RemainingAmount
		return protoreflect.ValueOfInt32(value)
	case "bridge.dex.SellPacketAck.gain":
		value := x.Gain
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		x.RemainingAmount = int32(value.Int())
	case "bridge.dex.SellPacketAck.gain":
		x.Gain = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		panic(fmt.Errorf("field remainingAmount of message bridge.dex.SellPacketAck is not mutable"))
	case "bridge.dex.SellPacketAck.gain":
		panic(fmt.Errorf("field gain of message bridge.dex.SellPacketAck is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SellPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.SellPacketAck.remainingAmount":
		return protoreflect.ValueOfInt32(int32(0))
	case "bridge.dex.SellPacketAck.gain":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.SellPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.SellPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SellPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.SellPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SellPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SellPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SellPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SellPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SellPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RemainingAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.RemainingAmount))
		}
		if x.Gain != 0 {
			n += 1 + runtime.Sov(uint64(x.Gain))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SellPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Gain != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Gain))
			i--
			dAtA[i] = 0x10
		}
		if x.RemainingAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RemainingAmount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SellPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SellPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SellPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingAmount", wireType)
				}
				x.RemainingAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RemainingAmount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
				}
				x.Gain = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Gain |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BuyPacketData             protoreflect.MessageDescriptor
	fd_BuyPacketData_amountDenom protoreflect.FieldDescriptor
	fd_BuyPacketData_amount      protoreflect.FieldDescriptor
	fd_BuyPacketData_priceDenom  protoreflect.FieldDescriptor
	fd_BuyPacketData_price       protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_BuyPacketData = File_bridge_dex_packet_proto.Messages().ByName("BuyPacketData")
	fd_BuyPacketData_amountDenom = md_BuyPacketData.Fields().ByName("amountDenom")
	fd_BuyPacketData_amount = md_BuyPacketData.Fields().ByName("amount")
	fd_BuyPacketData_priceDenom = md_BuyPacketData.Fields().ByName("priceDenom")
	fd_BuyPacketData_price = md_BuyPacketData.Fields().ByName("price")
}

var _ protoreflect.Message = (*fastReflection_BuyPacketData)(nil)

type fastReflection_BuyPacketData BuyPacketData

func (x *BuyPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BuyPacketData)(x)
}

func (x *BuyPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BuyPacketData_messageType fastReflection_BuyPacketData_messageType
var _ protoreflect.MessageType = fastReflection_BuyPacketData_messageType{}

type fastReflection_BuyPacketData_messageType struct{}

func (x fastReflection_BuyPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BuyPacketData)(nil)
}
func (x fastReflection_BuyPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_BuyPacketData)
}
func (x fastReflection_BuyPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BuyPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BuyPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_BuyPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BuyPacketData) Type() protoreflect.MessageType {
	return _fastReflection_BuyPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BuyPacketData) New() protoreflect.Message {
	return new(fastReflection_BuyPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BuyPacketData) Interface() protoreflect.ProtoMessage {
	return (*BuyPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BuyPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AmountDenom != "" {
		value := protoreflect.ValueOfString(x.AmountDenom)
		if !f(fd_BuyPacketData_amountDenom, value) {
			return
		}
	}
	if x.Amount != int32(0) {
		value := protoreflect.ValueOfInt32(x.Amount)
		if !f(fd_BuyPacketData_amount, value) {
			return
		}
	}
	if x.PriceDenom != "" {
		value := protoreflect.ValueOfString(x.PriceDenom)
		if !f(fd_BuyPacketData_priceDenom, value) {
			return
		}
	}
	if x.Price != int32(0) {
		value := protoreflect.ValueOfInt32(x.Price)
		if !f(fd_BuyPacketData_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BuyPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		return x.AmountDenom != ""
	case "bridge.dex.BuyPacketData.amount":
		return x.Amount != int32(0)
	case "bridge.dex.BuyPacketData.priceDenom":
		return x.PriceDenom != ""
	case "bridge.dex.BuyPacketData.price":
		return x.Price != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		x.AmountDenom = ""
	case "bridge.dex.BuyPacketData.amount":
		x.Amount = int32(0)
	case "bridge.dex.BuyPacketData.priceDenom":
		x.PriceDenom = ""
	case "bridge.dex.BuyPacketData.price":
		x.Price = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BuyPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		value := x.AmountDenom
		return protoreflect.ValueOfString(value)
	case "bridge.dex.BuyPacketData.amount":
		value := x.Amount
		return protoreflect.ValueOfInt32(value)
	case "bridge.dex.BuyPacketData.priceDenom":
		value := x.PriceDenom
		return protoreflect.ValueOfString(value)
	case "bridge.dex.BuyPacketData.price":
		value := x.Price
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		x.AmountDenom = value.Interface().(string)
	case "bridge.dex.BuyPacketData.amount":
		x.Amount = int32(value.Int())
	case "bridge.dex.BuyPacketData.priceDenom":
		x.PriceDenom = value.Interface().(string)
	case "bridge.dex.BuyPacketData.price":
		x.Price = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		panic(fmt.Errorf("field amountDenom of message bridge.dex.BuyPacketData is not mutable"))
	case "bridge.dex.BuyPacketData.amount":
		panic(fmt.Errorf("field amount of message bridge.dex.BuyPacketData is not mutable"))
	case "bridge.dex.BuyPacketData.priceDenom":
		panic(fmt.Errorf("field priceDenom of message bridge.dex.BuyPacketData is not mutable"))
	case "bridge.dex.BuyPacketData.price":
		panic(fmt.Errorf("field price of message bridge.dex.BuyPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BuyPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketData.amountDenom":
		return protoreflect.ValueOfString("")
	case "bridge.dex.BuyPacketData.amount":
		return protoreflect.ValueOfInt32(int32(0))
	case "bridge.dex.BuyPacketData.priceDenom":
		return protoreflect.ValueOfString("")
	case "bridge.dex.BuyPacketData.price":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketData"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BuyPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.BuyPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BuyPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BuyPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BuyPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BuyPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AmountDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		l = len(x.PriceDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Price != 0 {
			n += 1 + runtime.Sov(uint64(x.Price))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BuyPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Price != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Price))
			i--
			dAtA[i] = 0x20
		}
		if len(x.PriceDenom) > 0 {
			i -= len(x.PriceDenom)
			copy(dAtA[i:], x.PriceDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PriceDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AmountDenom) > 0 {
			i -= len(x.AmountDenom)
			copy(dAtA[i:], x.AmountDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BuyPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BuyPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BuyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PriceDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				x.Price = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Price |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BuyPacketAck                 protoreflect.MessageDescriptor
	fd_BuyPacketAck_remainingAmount protoreflect.FieldDescriptor
	fd_BuyPacketAck_purchase        protoreflect.FieldDescriptor
)

func init() {
	file_bridge_dex_packet_proto_init()
	md_BuyPacketAck = File_bridge_dex_packet_proto.Messages().ByName("BuyPacketAck")
	fd_BuyPacketAck_remainingAmount = md_BuyPacketAck.Fields().ByName("remainingAmount")
	fd_BuyPacketAck_purchase = md_BuyPacketAck.Fields().ByName("purchase")
}

var _ protoreflect.Message = (*fastReflection_BuyPacketAck)(nil)

type fastReflection_BuyPacketAck BuyPacketAck

func (x *BuyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BuyPacketAck)(x)
}

func (x *BuyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_bridge_dex_packet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BuyPacketAck_messageType fastReflection_BuyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_BuyPacketAck_messageType{}

type fastReflection_BuyPacketAck_messageType struct{}

func (x fastReflection_BuyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BuyPacketAck)(nil)
}
func (x fastReflection_BuyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_BuyPacketAck)
}
func (x fastReflection_BuyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BuyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BuyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_BuyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BuyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_BuyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BuyPacketAck) New() protoreflect.Message {
	return new(fastReflection_BuyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BuyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*BuyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BuyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RemainingAmount != int32(0) {
		value := protoreflect.ValueOfInt32(x.RemainingAmount)
		if !f(fd_BuyPacketAck_remainingAmount, value) {
			return
		}
	}
	if x.Purchase != int32(0) {
		value := protoreflect.ValueOfInt32(x.Purchase)
		if !f(fd_BuyPacketAck_purchase, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BuyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		return x.RemainingAmount != int32(0)
	case "bridge.dex.BuyPacketAck.purchase":
		return x.Purchase != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		x.RemainingAmount = int32(0)
	case "bridge.dex.BuyPacketAck.purchase":
		x.Purchase = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BuyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		value := x.RemainingAmount
		return protoreflect.ValueOfInt32(value)
	case "bridge.dex.BuyPacketAck.purchase":
		value := x.Purchase
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		x.RemainingAmount = int32(value.Int())
	case "bridge.dex.BuyPacketAck.purchase":
		x.Purchase = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		panic(fmt.Errorf("field remainingAmount of message bridge.dex.BuyPacketAck is not mutable"))
	case "bridge.dex.BuyPacketAck.purchase":
		panic(fmt.Errorf("field purchase of message bridge.dex.BuyPacketAck is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BuyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bridge.dex.BuyPacketAck.remainingAmount":
		return protoreflect.ValueOfInt32(int32(0))
	case "bridge.dex.BuyPacketAck.purchase":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bridge.dex.BuyPacketAck"))
		}
		panic(fmt.Errorf("message bridge.dex.BuyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BuyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bridge.dex.BuyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BuyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BuyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BuyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BuyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BuyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RemainingAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.RemainingAmount))
		}
		if x.Purchase != 0 {
			n += 1 + runtime.Sov(uint64(x.Purchase))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BuyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Purchase != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Purchase))
			i--
			dAtA[i] = 0x10
		}
		if x.RemainingAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RemainingAmount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BuyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BuyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BuyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingAmount", wireType)
				}
				x.RemainingAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RemainingAmount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
				}
				x.Purchase = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Purchase |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: bridge/dex/packet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DexPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Packet:
	//
	//	*DexPacketData_NoData
	//	*DexPacketData_CreatePairPacket
	//	*DexPacketData_SellPacket
	//	*DexPacketData_BuyPacket
	Packet isDexPacketData_Packet `protobuf_oneof:"packet"`
}

func (x *DexPacketData) Reset() {
	*x = DexPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DexPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexPacketData) ProtoMessage() {}

// Deprecated: Use DexPacketData.ProtoReflect.Descriptor instead.
func (*DexPacketData) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{0}
}

func (x *DexPacketData) GetPacket() isDexPacketData_Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *DexPacketData) GetNoData() *NoData {
	if x, ok := x.GetPacket().(*DexPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (x *DexPacketData) GetCreatePairPacket() *CreatePairPacketData {
	if x, ok := x.GetPacket().(*DexPacketData_CreatePairPacket); ok {
		return x.CreatePairPacket
	}
	return nil
}

func (x *DexPacketData) GetSellPacket() *SellPacketData {
	if x, ok := x.GetPacket().(*DexPacketData_SellPacket); ok {
		return x.SellPacket
	}
	return nil
}

func (x *DexPacketData) GetBuyPacket() *BuyPacketData {
	if x, ok := x.GetPacket().(*DexPacketData_BuyPacket); ok {
		return x.BuyPacket
	}
	return nil
}

type isDexPacketData_Packet interface {
	isDexPacketData_Packet()
}

type DexPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof"`
}

type DexPacketData_CreatePairPacket struct {
	CreatePairPacket *CreatePairPacketData `protobuf:"bytes,2,opt,name=createPairPacket,proto3,oneof"`
}

type DexPacketData_SellPacket struct {
	SellPacket *SellPacketData `protobuf:"bytes,3,opt,name=sellPacket,proto3,oneof"`
}

type DexPacketData_BuyPacket struct {
	BuyPacket *BuyPacketData `protobuf:"bytes,4,opt,name=buyPacket,proto3,oneof"`
}

func (*DexPacketData_NoData) isDexPacketData_Packet() {}

func (*DexPacketData_CreatePairPacket) isDexPacketData_Packet() {}

func (*DexPacketData_SellPacket) isDexPacketData_Packet() {}

func (*DexPacketData_BuyPacket) isDexPacketData_Packet() {}

type NoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoData) Reset() {
	*x = NoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoData) ProtoMessage() {}

// Deprecated: Use NoData.ProtoReflect.Descriptor instead.
func (*NoData) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{1}
}

// CreatePairPacketData defines a struct for the packet payload
type CreatePairPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceDenom string `protobuf:"bytes,1,opt,name=sourceDenom,proto3" json:"sourceDenom,omitempty"`
	TargetDenom string `protobuf:"bytes,2,opt,name=targetDenom,proto3" json:"targetDenom,omitempty"`
}

func (x *CreatePairPacketData) Reset() {
	*x = CreatePairPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairPacketData) ProtoMessage() {}

// Deprecated: Use CreatePairPacketData.ProtoReflect.Descriptor instead.
func (*CreatePairPacketData) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePairPacketData) GetSourceDenom() string {
	if x != nil {
		return x.SourceDenom
	}
	return ""
}

func (x *CreatePairPacketData) GetTargetDenom() string {
	if x != nil {
		return x.TargetDenom
	}
	return ""
}

// CreatePairPacketAck defines a struct for the packet acknowledgment
type CreatePairPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePairPacketAck) Reset() {
	*x = CreatePairPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePairPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePairPacketAck) ProtoMessage() {}

// Deprecated: Use CreatePairPacketAck.ProtoReflect.Descriptor instead.
func (*CreatePairPacketAck) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{3}
}

// SellPacketData defines a struct for the packet payload
type SellPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountDenom string `protobuf:"bytes,1,opt,name=amountDenom,proto3" json:"amountDenom,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PriceDenom  string `protobuf:"bytes,3,opt,name=priceDenom,proto3" json:"priceDenom,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SellPacketData) Reset() {
	*x = SellPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellPacketData) ProtoMessage() {}

// Deprecated: Use SellPacketData.ProtoReflect.Descriptor instead.
func (*SellPacketData) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{4}
}

func (x *SellPacketData) GetAmountDenom() string {
	if x != nil {
		return x.AmountDenom
	}
	return ""
}

func (x *SellPacketData) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SellPacketData) GetPriceDenom() string {
	if x != nil {
		return x.PriceDenom
	}
	return ""
}

func (x *SellPacketData) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

// SellPacketAck defines a struct for the packet acknowledgment
type SellPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainingAmount int32 `protobuf:"varint,1,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Gain            int32 `protobuf:"varint,2,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *SellPacketAck) Reset() {
	*x = SellPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellPacketAck) ProtoMessage() {}

// Deprecated: Use SellPacketAck.ProtoReflect.Descriptor instead.
func (*SellPacketAck) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{5}
}

func (x *SellPacketAck) GetRemainingAmount() int32 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *SellPacketAck) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

// BuyPacketData defines a struct for the packet payload
type BuyPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountDenom string `protobuf:"bytes,1,opt,name=amountDenom,proto3" json:"amountDenom,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PriceDenom  string `protobuf:"bytes,3,opt,name=priceDenom,proto3" json:"priceDenom,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BuyPacketData) Reset() {
	*x = BuyPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPacketData) ProtoMessage() {}

// Deprecated: Use BuyPacketData.ProtoReflect.Descriptor instead.
func (*BuyPacketData) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{6}
}

func (x *BuyPacketData) GetAmountDenom() string {
	if x != nil {
		return x.AmountDenom
	}
	return ""
}

func (x *BuyPacketData) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BuyPacketData) GetPriceDenom() string {
	if x != nil {
		return x.PriceDenom
	}
	return ""
}

func (x *BuyPacketData) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

// BuyPacketAck defines a struct for the packet acknowledgment
type BuyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainingAmount int32 `protobuf:"varint,1,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Purchase        int32 `protobuf:"varint,2,opt,name=purchase,proto3" json:"purchase,omitempty"`
}

func (x *BuyPacketAck) Reset() {
	*x = BuyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_dex_packet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPacketAck) ProtoMessage() {}

// Deprecated: Use BuyPacketAck.ProtoReflect.Descriptor instead.
func (*BuyPacketAck) Descriptor() ([]byte, []int) {
	return file_bridge_dex_packet_proto_rawDescGZIP(), []int{7}
}

func (x *BuyPacketAck) GetRemainingAmount() int32 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *BuyPacketAck) GetPurchase() int32 {
	if x != nil {
		return x.Purchase
	}
	return 0
}

var File_bridge_dex_packet_proto protoreflect.FileDescriptor

var file_bridge_dex_packet_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x64, 0x65, 0x78, 0x22, 0x90, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x6e, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x09, 0x62, 0x75, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x5a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x15,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x6b, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x7f, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x83,
	0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x64, 0x65,
	0x78, 0x42, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x78, 0xa2, 0x02, 0x03,
	0x42, 0x44, 0x58, 0xaa, 0x02, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x78,
	0xca, 0x02, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5c, 0x44, 0x65, 0x78, 0xe2, 0x02, 0x16,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5c, 0x44, 0x65, 0x78, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x3a,
	0x3a, 0x44, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridge_dex_packet_proto_rawDescOnce sync.Once
	file_bridge_dex_packet_proto_rawDescData = file_bridge_dex_packet_proto_rawDesc
)

func file_bridge_dex_packet_proto_rawDescGZIP() []byte {
	file_bridge_dex_packet_proto_rawDescOnce.Do(func() {
		file_bridge_dex_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridge_dex_packet_proto_rawDescData)
	})
	return file_bridge_dex_packet_proto_rawDescData
}

var file_bridge_dex_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bridge_dex_packet_proto_goTypes = []interface{}{
	(*DexPacketData)(nil),        // 0: bridge.dex.DexPacketData
	(*NoData)(nil),               // 1: bridge.dex.NoData
	(*CreatePairPacketData)(nil), // 2: bridge.dex.CreatePairPacketData
	(*CreatePairPacketAck)(nil),  // 3: bridge.dex.CreatePairPacketAck
	(*SellPacketData)(nil),       // 4: bridge.dex.SellPacketData
	(*SellPacketAck)(nil),        // 5: bridge.dex.SellPacketAck
	(*BuyPacketData)(nil),        // 6: bridge.dex.BuyPacketData
	(*BuyPacketAck)(nil),         // 7: bridge.dex.BuyPacketAck
}
var file_bridge_dex_packet_proto_depIdxs = []int32{
	1, // 0: bridge.dex.DexPacketData.noData:type_name -> bridge.dex.NoData
	2, // 1: bridge.dex.DexPacketData.createPairPacket:type_name -> bridge.dex.CreatePairPacketData
	4, // 2: bridge.dex.DexPacketData.sellPacket:type_name -> bridge.dex.SellPacketData
	6, // 3: bridge.dex.DexPacketData.buyPacket:type_name -> bridge.dex.BuyPacketData
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_bridge_dex_packet_proto_init() }
func file_bridge_dex_packet_proto_init() {
	if File_bridge_dex_packet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bridge_dex_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DexPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePairPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_dex_packet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bridge_dex_packet_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DexPacketData_NoData)(nil),
		(*DexPacketData_CreatePairPacket)(nil),
		(*DexPacketData_SellPacket)(nil),
		(*DexPacketData_BuyPacket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridge_dex_packet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bridge_dex_packet_proto_goTypes,
		DependencyIndexes: file_bridge_dex_packet_proto_depIdxs,
		MessageInfos:      file_bridge_dex_packet_proto_msgTypes,
	}.Build()
	File_bridge_dex_packet_proto = out.File
	file_bridge_dex_packet_proto_rawDesc = nil
	file_bridge_dex_packet_proto_goTypes = nil
	file_bridge_dex_packet_proto_depIdxs = nil
}
